{"ast":null,"code":"import _slicedToArray from\"/home/elton/the_odin_project/react-shopping-cart/app-folder/react-shopping-cart/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import hoodie from'../../assets/images/mens/men-hoodie.jpg';import bracelet from'../../assets/images/mens/men-bracelet.jpg';import watch from'../../assets/images/womens/women-watch.jpg';import tank from'../../assets/images/womens/women-black-tank.jpg';import styles from'../../modules/styling-modules/Homepage.module.css';import{jsx as _jsx}from\"react/jsx-runtime\";function Carousel(){// Created a list of items I want to display in my image Carousel \nvar myProductInfo=[hoodie,bracelet,watch,tank];// Initialize state\nvar _useState=useState(0),_useState2=_slicedToArray(_useState,2),product=_useState2[0],setProduct=_useState2[1];var myStyle={backgroundImage:\"url(\".concat(myProductInfo[product],\")\")};// My thinking was that I needed some way to re-render my component an infinite number of times, setInterval seemed appropriate\n// The simplest way to re-render would be to create a state of int values going with the same index amount of myProductInfo\n// After looking at the React docs useEffect() hook seemed to be the most appropriate to use here since:\n// 1. The timer needed to be be mounted after render to avoid bugs\n// 2. The timer needs to be unmounted after each tick to prevent bugs\nuseEffect(function(){// setInterval is assigned to startTimer variable, in it we set the state of product using function form.\n// Function form allows us to make sure the correct previous value is used.\n// When product(s) hits the value of 3, then setProduct(0), else: setProduct(product + 1)\nvar startTimer=setInterval(function(){setProduct(function(s){if(s===3){return s=0;}else{return s+1;}});},2000);// Used to unmount timer\nreturn function(){clearInterval(startTimer);};// Mounting only occurs once\n},[]);return/*#__PURE__*/_jsx(\"div\",{style:myStyle,className:styles['carousel'],id:\"carousel\",\"data-testid\":\"carousel\"});}export default Carousel;","map":{"version":3,"names":["React","useState","useEffect","hoodie","bracelet","watch","tank","styles","Carousel","myProductInfo","product","setProduct","myStyle","backgroundImage","startTimer","setInterval","s","clearInterval"],"sources":["/home/elton/the_odin_project/react-shopping-cart/app-folder/react-shopping-cart/src/components/homepage/ProductCarousel.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport hoodie from '../../assets/images/mens/men-hoodie.jpg';\nimport bracelet from '../../assets/images/mens/men-bracelet.jpg';\nimport watch from '../../assets/images/womens/women-watch.jpg';\nimport tank from '../../assets/images/womens/women-black-tank.jpg';\nimport styles from '../../modules/styling-modules/Homepage.module.css';\n\n\n\nfunction Carousel() {\n  // Created a list of items I want to display in my image Carousel \n  const myProductInfo = [hoodie, bracelet, watch, tank];\n  // Initialize state\n\n  const [product, setProduct] = useState(0);\n  const myStyle = {\n    backgroundImage: `url(${myProductInfo[product]})`\n  }\n\n  // My thinking was that I needed some way to re-render my component an infinite number of times, setInterval seemed appropriate\n  // The simplest way to re-render would be to create a state of int values going with the same index amount of myProductInfo\n  // After looking at the React docs useEffect() hook seemed to be the most appropriate to use here since:\n  // 1. The timer needed to be be mounted after render to avoid bugs\n  // 2. The timer needs to be unmounted after each tick to prevent bugs\n  useEffect(() => {\n\n    // setInterval is assigned to startTimer variable, in it we set the state of product using function form.\n    // Function form allows us to make sure the correct previous value is used.\n    // When product(s) hits the value of 3, then setProduct(0), else: setProduct(product + 1)\n    const startTimer = setInterval(() => {\n      setProduct((s) => {\n        if(s === 3) {\n          return s = 0;\n        } else {\n          return s + 1;\n        }\n      });\n\n    }, 2000);\n    // Used to unmount timer\n    return () => {\n      clearInterval(startTimer);\n    };\n    // Mounting only occurs once\n  }, []);\n  \n  return (\n    <div style={myStyle} className={styles['carousel']} id=\"carousel\" data-testid=\"carousel\">\n    </div>\n  )\n}\n\nexport default Carousel;"],"mappings":"qKAAA,MAAOA,MAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,OAAP,KAAmB,yCAAnB,CACA,MAAOC,SAAP,KAAqB,2CAArB,CACA,MAAOC,MAAP,KAAkB,4CAAlB,CACA,MAAOC,KAAP,KAAiB,iDAAjB,CACA,MAAOC,OAAP,KAAmB,mDAAnB,C,2CAIA,QAASC,SAAT,EAAoB,CAClB;AACA,GAAMC,cAAa,CAAG,CAACN,MAAD,CAASC,QAAT,CAAmBC,KAAnB,CAA0BC,IAA1B,CAAtB,CACA;AAEA,cAA8BL,QAAQ,CAAC,CAAD,CAAtC,wCAAOS,OAAP,eAAgBC,UAAhB,eACA,GAAMC,QAAO,CAAG,CACdC,eAAe,eAASJ,aAAa,CAACC,OAAD,CAAtB,KADD,CAAhB,CAIA;AACA;AACA;AACA;AACA;AACAR,SAAS,CAAC,UAAM,CAEd;AACA;AACA;AACA,GAAMY,WAAU,CAAGC,WAAW,CAAC,UAAM,CACnCJ,UAAU,CAAC,SAACK,CAAD,CAAO,CAChB,GAAGA,CAAC,GAAK,CAAT,CAAY,CACV,MAAOA,EAAC,CAAG,CAAX,CACD,CAFD,IAEO,CACL,MAAOA,EAAC,CAAG,CAAX,CACD,CACF,CANS,CAAV,CAQD,CAT6B,CAS3B,IAT2B,CAA9B,CAUA;AACA,MAAO,WAAM,CACXC,aAAa,CAACH,UAAD,CAAb,CACD,CAFD,CAGA;AACD,CApBQ,CAoBN,EApBM,CAAT,CAsBA,mBACE,YAAK,KAAK,CAAEF,OAAZ,CAAqB,SAAS,CAAEL,MAAM,CAAC,UAAD,CAAtC,CAAoD,EAAE,CAAC,UAAvD,CAAkE,cAAY,UAA9E,EADF,CAID,CAED,cAAeC,SAAf"},"metadata":{},"sourceType":"module"}